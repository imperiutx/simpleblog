// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comment.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  user_id,
  post_id,
  content
) VALUES (
  $1, $2, $3
) RETURNING id, created_at
`

type CreateCommentParams struct {
	UserID  pgtype.Int8 `json:"user_id"`
	PostID  pgtype.Int8 `json:"post_id"`
	Content string      `json:"content"`
}

type CreateCommentRow struct {
	ID        int64     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error) {
	row := q.db.QueryRow(ctx, createComment, arg.UserID, arg.PostID, arg.Content)
	var i CreateCommentRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET
  content = COALESCE($1, content)
WHERE id = $2
RETURNING id, edited_at
`

type UpdateCommentParams struct {
	Content pgtype.Text `json:"content"`
	ID      int64       `json:"id"`
}

type UpdateCommentRow struct {
	ID       int64     `json:"id"`
	EditedAt time.Time `json:"edited_at"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (UpdateCommentRow, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.Content, arg.ID)
	var i UpdateCommentRow
	err := row.Scan(&i.ID, &i.EditedAt)
	return i, err
}
