// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  username,
  post_id,
  content
) VALUES (
  $1, $2, $3
) RETURNING id, username, post_id, content, created_at, edited_at
`

type CreateCommentParams struct {
	Username pgtype.Text `json:"username"`
	PostID   pgtype.Int8 `json:"post_id"`
	Content  string      `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Username, arg.PostID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PostID,
		&i.Content,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const listAllComments = `-- name: ListAllComments :many
SELECT id, username, post_id, content, created_at, edited_at
FROM comments
ORDER BY id DESC
LIMIT 10
`

func (q *Queries) ListAllComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.Query(ctx, listAllComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PostID,
			&i.Content,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommentsByPostID = `-- name: ListCommentsByPostID :many
SELECT id, username, post_id, content, created_at, edited_at
FROM comments
WHERE post_id = $1
ORDER BY id
`

func (q *Queries) ListCommentsByPostID(ctx context.Context, postID pgtype.Int8) ([]Comment, error) {
	rows, err := q.db.Query(ctx, listCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PostID,
			&i.Content,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET
  content = COALESCE($1, content)
WHERE id = $2
RETURNING id, username, post_id, content, created_at, edited_at
`

type UpdateCommentParams struct {
	Content pgtype.Text `json:"content"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.Content, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PostID,
		&i.Content,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}
