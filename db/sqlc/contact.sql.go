// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: contact.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
  first_name,
  last_name,
  email,
  phone
) VALUES (
  $1, $2, $3, $4
) RETURNING id, first_name, last_name, email, phone, created_at, updated_at
`

type CreateContactParams struct {
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Email     string      `json:"email"`
	Phone     pgtype.Text `json:"phone"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteContact, id)
	return err
}

const getContactById = `-- name: GetContactById :one
SELECT id, first_name, last_name, email, phone, created_at, updated_at FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContactById(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRow(ctx, getContactById, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContactForUpdate = `-- name: GetContactForUpdate :one
SELECT id, first_name, last_name, email, phone, created_at, updated_at FROM contacts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetContactForUpdate(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRow(ctx, getContactForUpdate, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, first_name, last_name, email, phone, created_at, updated_at FROM contacts
ORDER BY id
`

func (q *Queries) ListContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET 
  first_name = COALESCE($1, first_name),
  last_name = COALESCE($2, last_name),
  phone = COALESCE($3, phone),
  updated_at = now()
WHERE id = $4
RETURNING id, first_name, last_name, email, phone, created_at, updated_at
`

type UpdateContactParams struct {
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Phone     pgtype.Text `json:"phone"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, updateContact,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.ID,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
