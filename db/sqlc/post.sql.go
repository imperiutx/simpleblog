// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  username,
  title,
  content, 
  tags
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, title, content, tags, status, created_at, edited_at
`

type CreatePostParams struct {
	Username pgtype.Text `json:"username"`
	Title    string      `json:"title"`
	Content  string      `json:"content"`
	Tags     []string    `json:"tags"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Username,
		arg.Title,
		arg.Content,
		arg.Tags,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Content,
		&i.Tags,
		&i.Status,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, username, title, content, tags, status, created_at, edited_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPostById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Content,
		&i.Tags,
		&i.Status,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getPostForUpdate = `-- name: GetPostForUpdate :one
SELECT id, username, title, content, tags, status, created_at, edited_at FROM posts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPostForUpdate(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPostForUpdate, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Content,
		&i.Tags,
		&i.Status,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, username, title, content, tags, status, created_at, edited_at FROM posts
ORDER BY id DESC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Title,
			&i.Content,
			&i.Tags,
			&i.Status,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET 
  title = COALESCE($1, title),
  content = COALESCE($2, content),
  edited_at = now()
WHERE id = $3
RETURNING id, edited_at
`

type UpdatePostParams struct {
	Title   pgtype.Text `json:"title"`
	Content pgtype.Text `json:"content"`
	ID      int64       `json:"id"`
}

type UpdatePostRow struct {
	ID       int64     `json:"id"`
	EditedAt time.Time `json:"edited_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UpdatePostRow, error) {
	row := q.db.QueryRow(ctx, updatePost, arg.Title, arg.Content, arg.ID)
	var i UpdatePostRow
	err := row.Scan(&i.ID, &i.EditedAt)
	return i, err
}
